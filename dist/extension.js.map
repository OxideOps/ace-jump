{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://ace-jump/./src/extension.ts","webpack://ace-jump/external commonjs \"vscode\"","webpack://ace-jump/webpack/bootstrap","webpack://ace-jump/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\n// Decoration type for matched characters\nlet matchDecorationType: vscode.TextEditorDecorationType = vscode.window.createTextEditorDecorationType({\n    border: '2px solid #569cd6',\n    backgroundColor: 'rgba(38, 79, 120, 0.5)',\n    // @ts-ignore - borderRadius is not in the type definition but works in practice\n    borderRadius: '3px'\n});\n\n// Decoration type for character labels\nlet labelDecorationType: vscode.TextEditorDecorationType = vscode.window.createTextEditorDecorationType({\n    before: {\n        margin: '0 3px 0 0',\n        backgroundColor: '#569cd6',\n        color: 'white',\n        fontWeight: 'bold',\n        // @ts-ignore - borderRadius is not in the type definition but works in practice\n        borderRadius: '2px',\n        padding: '0 3px'\n    }\n});\n\n// Track if we're in jump mode\nlet inJumpMode: boolean = false;\nlet labelDecorations: vscode.DecorationOptions[] = [];\nlet quickPick: vscode.QuickPick<vscode.QuickPickItem> | null = null;\nlet searchBuffer: string = '';\n\n// Map to track label positions - key is the label, value is the Position to jump to\nlet labelPositionMap: Map<string, vscode.Position> = new Map();\n\n// Characters used for labels - chosen for clarity and ease of reach on keyboard\nconst labelChars: string = 'abcdefghijklmnopqrstuvwxyz';\n\n// Interface for storing match information\ninterface MatchPosition {\n    start: vscode.Position;\n    range: vscode.Range;\n    nextChar: string;\n}\n\nexport function activate(context: vscode.ExtensionContext): void {\n    // Register the main ace jump command\n    const startJumpDisposable = vscode.commands.registerCommand('ace-jump.startJump', function () {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            return;\n        }\n\n        // If already in jump mode, exit\n        if (inJumpMode) {\n            exitJumpMode(editor);\n            return;\n        }\n\n        // Enter jump mode\n        inJumpMode = true;\n        searchBuffer = '';\n\n        // Create QuickPick input that minimizes UI\n        quickPick = vscode.window.createQuickPick();\n        quickPick.placeholder = 'Type characters to highlight (ESC to cancel)';\n        quickPick.items = [];\n\n        // Make the quickpick as minimal as possible\n        quickPick.matchOnDescription = false;\n        quickPick.matchOnDetail = false;\n        quickPick.canSelectMany = false;\n\n        // Listen to value changes to update highlights in real-time\n        quickPick.onDidChangeValue(value => {\n            searchBuffer = value;\n            findAndHighlightMatches(editor, searchBuffer);\n        });\n\n        // Exit when quickpick is hidden\n        quickPick.onDidHide(() => {\n            exitJumpMode(editor);\n        });\n\n        // Show the quickpick\n        quickPick.show();\n    });\n\n    // Register the escape jump mode command\n    const escJumpDisposable = vscode.commands.registerCommand('extension.escapeJumpMode', () => {\n        if (inJumpMode) {\n            const editor = vscode.window.activeTextEditor;\n            if (editor) {\n                exitJumpMode(editor);\n            }\n        }\n    });\n\n    context.subscriptions.push(startJumpDisposable);\n    context.subscriptions.push(escJumpDisposable);\n}\n\n// Generate unique labels efficiently\nfunction generateLabels(count: number, charsToAvoid: Set<string> = new Set()): string[] {\n    const labels: string[] = [];\n    // Filter out characters to avoid\n    const filteredLabelChars = labelChars.split('')\n        .filter(char => !charsToAvoid.has(char.toUpperCase()))\n        .join('');\n\n    // If we have no usable chars, fallback to original set\n    const usableChars = filteredLabelChars.length > 0 ? filteredLabelChars : labelChars;\n\n    // First, use single characters if there are few enough matches\n    if (count <= usableChars.length) {\n        for (let i = 0; i < count; i++) {\n            labels.push(usableChars[i].toUpperCase());\n        }\n        return labels;\n    }\n\n    // Otherwise use combinations of characters\n    if (count <= usableChars.length * labelChars.length) {\n        for (let i = 0; i < usableChars.length; i++) {\n            for (let j = 0; j < labelChars.length && labels.length < count; j++) {\n                labels.push((usableChars[i] + labelChars[j]).toUpperCase());\n            }\n        }\n        return labels;\n    }\n\n    // If we need more labels (rare), generate three-character labels\n    for (let i = 0; i < usableChars.length && labels.length < count; i++) {\n        for (let j = 0; j < labelChars.length && labels.length < count; j++) {\n            for (let k = 0; k < labelChars.length && labels.length < count; k++) {\n                labels.push((usableChars[i] + labelChars[j] + labelChars[k]).toUpperCase());\n            }\n        }\n    }\n    return labels;\n}\n\nfunction findAndHighlightMatches(editor: vscode.TextEditor, searchString: string): void {\n    // Clear previous decorations\n    editor.setDecorations(matchDecorationType, []);\n    editor.setDecorations(labelDecorationType, []);\n\n    if (!searchString) {\n        return;\n    }\n\n    const text = editor.document.getText();\n    const searchRegex = new RegExp(escapeRegExp(searchString), 'gi');\n    const matchRanges: vscode.DecorationOptions[] = [];\n    const visibleRanges = editor.visibleRanges;\n\n    // Find all matches\n    let match: RegExpExecArray | null;\n    let matchPositions: MatchPosition[] = [];\n    const nextChars = new Set<string>();\n\n    while ((match = searchRegex.exec(text)) !== null) {\n        const startPos = editor.document.positionAt(match.index);\n        const endPos = editor.document.positionAt(match.index + searchString.length);\n\n        // Only include matches in the visible ranges\n        for (const visibleRange of visibleRanges) {\n            if (startPos.line >= visibleRange.start.line && endPos.line <= visibleRange.end.line) {\n                const nextChar = getNextCharacter(editor, endPos);\n                // Store match information with position\n                matchPositions.push({\n                    start: startPos,\n                    range: new vscode.Range(startPos, endPos),\n                    nextChar\n                });\n                // Add to set of chars to avoid if it's a letter\n                if (nextChar.match(/[a-zA-Z]/)) {\n                    nextChars.add(nextChar.toUpperCase());\n                }\n                break;\n            }\n        }\n    }\n\n    // Generate a unique label for each match, avoiding next character conflicts\n    const labels = generateLabels(matchPositions.length, nextChars);\n\n    // Create highlight decorations and label decorations\n    matchRanges.length = 0;\n    labelDecorations.length = 0;\n\n    // Clear map\n    labelPositionMap.clear();\n\n    matchPositions.forEach((match, index) => {\n        // Add match highlighting\n        matchRanges.push({\n            range: match.range\n        });\n\n        // Add label decoration\n        const label = labels[index];\n        labelDecorations.push({\n            range: new vscode.Range(match.start, match.start),\n            renderOptions: {\n                before: {\n                    contentText: label\n                }\n            }\n        });\n\n        // Store the label and its position for future jumping\n        labelPositionMap.set(label, match.start);\n    });\n\n    // Apply decorations\n    editor.setDecorations(matchDecorationType, matchRanges);\n    editor.setDecorations(labelDecorationType, labelDecorations);\n\n    // Update the QuickPick title with match count\n    if (quickPick) {\n        quickPick.title = `${matchPositions.length} matches`;\n    }\n}\n\nfunction getNextCharacter(editor: vscode.TextEditor, position: vscode.Position): string {\n    // Get the character after the match, if possible\n    try {\n        const nextPos = position.translate(0, 1);\n        const range = new vscode.Range(position, nextPos);\n        return editor.document.getText(range);\n    } catch (e) {\n        return '';\n    }\n}\n\nfunction clearDecorations(editor: vscode.TextEditor): void {\n    // Clear all decorations\n    editor.setDecorations(matchDecorationType, []);\n    editor.setDecorations(labelDecorationType, []);\n}\n\nfunction exitJumpMode(editor: vscode.TextEditor): void {\n    inJumpMode = false;\n    clearDecorations(editor);\n    labelPositionMap.clear();\n\n    // Dispose quickpick if exists\n    if (quickPick) {\n        quickPick.dispose();\n        quickPick = null;\n    }\n}\n\nfunction escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nexport function deactivate(): void { } ","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["matchDecorationType","vscode","window","createTextEditorDecorationType","border","backgroundColor","borderRadius","labelDecorationType","before","margin","color","fontWeight","padding","inJumpMode","labelDecorations","quickPick","searchBuffer","labelPositionMap","Map","labelChars","getNextCharacter","editor","position","nextPos","translate","range","Range","document","getText","e","exitJumpMode","setDecorations","clearDecorations","clear","dispose","context","startJumpDisposable","commands","registerCommand","activeTextEditor","createQuickPick","placeholder","items","matchOnDescription","matchOnDetail","canSelectMany","onDidChangeValue","value","searchString","text","searchRegex","RegExp","replace","matchRanges","visibleRanges","match","matchPositions","nextChars","Set","exec","startPos","positionAt","index","endPos","length","visibleRange","line","start","end","nextChar","push","add","toUpperCase","labels","count","charsToAvoid","filteredLabelChars","split","filter","char","has","join","usableChars","i","j","k","generateLabels","forEach","label","renderOptions","contentText","set","title","findAndHighlightMatches","onDidHide","show","escJumpDisposable","subscriptions","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}